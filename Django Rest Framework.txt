Django Rest Framework :

1. VIEWS --> 
a. Function-Based Views (FBV) : These are simple Python functions that handle HTTP requests.

from rest_framework.decorators import api_view
from rest_framework.response import Response
@api_view(['GET'])
def my_view(request):
    return Response({"message": "Hello, world!"})

b. Class-Based Views (CBV) : which allow you to organize the logic for handling requests in a more structured way.

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
class MyView(APIView):
    def get(self, request):
        return Response({"message": "Hello, world!"}, status=status.HTTP_200_OK)

c. Generic Views : DRF provides a set of generic views that handle common patterns like listing, creating, updating, and deleting resources. These are built on top of class-based views and come with pre-implemented logic for typical database operations.
* ListAPIView: For listing multiple objects.
* CreateAPIView: For creating new objects.
* RetrieveAPIView: For retrieving a single object.
* UpdateAPIView: For updating an existing object.
* DestroyAPIView: For deleting an object.

from rest_framework.generics import ListAPIView
from .models import Item
from .serializers import ItemSerializer
class ItemListView(ListAPIView):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer

d. ViewSets : It combines the functionality of multiple views (like listing, creating, retrieving, updating, and deleting) into a single class. They are especially useful when you're working with resources that need to support all these operations.
DRF includes two types of viewsets:
* ModelViewSet: Provides the full set of CRUD operations automatically.
* ReadOnlyModelViewSet: Provides only read-only operations (list and retrieve).

from rest_framework.viewsets import ModelViewSet
from .models import Item
from .serializers import ItemSerializer
class ItemViewSet(ModelViewSet):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer

e. Mixins : Mixins are classes that provide reusable methods for common operations (e.g., create, retrieve, update, and delete). They are often used in combination with ViewSets.

from rest_framework import mixins
from rest_framework.viewsets import GenericViewSet
class ItemViewSet(mixins.ListModelMixin, mixins.CreateModelMixin, GenericViewSet):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer


2. ROUTER --> In Django, a router is a mechanism used to automatically generate URL patterns for views, especially when using ViewSets.
a. Default Router : The DefaultRouter automatically generates the standard set of routes for your ViewSets. It includes routes for all CRUD operations (list, create, retrieve, update, destroy).

from rest_framework.routers import DefaultRouter
from .views import ItemViewSet
router = DefaultRouter()
router.register(r'items', ItemViewSet)
urlpatterns = router.urls

b. SimpleRouter : The SimpleRouter is similar to DefaultRouter, but it doesn't include the api-root view. This is useful when you don't want the api-root view to be included in your API.


3. SERIALIZERS --> Converting complex data (like models or querysets) into formats that can be easily rendered into JSON or XML. Also Ensuring that the incoming data adheres to the required format and constraints before performing operations like saving it to the database.

a. Basic Serializer :  A basic serializer is used for simple data transformations. You can use it to serialize data from complex Python objects to JSON or vice versa.

from rest_framework import serializers
class ItemSerializer(serializers.Serializer):
    name = serializers.CharField(max_length=100)
    price = serializers.DecimalField(max_digits=10, decimal_places=2)


b. ModelSerializer : The ModelSerializer is a subclass of Serializer specifically for working with Django models. It automatically generates fields based on the model and allows you to easily perform operations such as saving or updating model instances.

from rest_framework import serializers
from .models import Item
class ItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = Item
        fields = ['id', 'name', 'price']

c. Nested Serializer : Nested Serializer can also represent nested relationships between models. For example, if you have a Category model with a foreign key to an Item model, you can use nested serializers to represent this relationship in the response.

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name']
class ItemSerializer(serializers.ModelSerializer):
    category = CategorySerializer()
    class Meta:
        model = Item
        fields = ['id', 'name', 'price', 'category']

d. HyperlinkedModelSerializer : A HyperlinkedModelSerializer is similar to a ModelSerializer, but it uses hyperlinks instead of primary keys for relationships. 

from rest_framework import serializers
class ItemSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Item
        fields = ['url', 'id', 'name', 'price']

